{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[379],{509:function(e,r){Prism.languages.scheme={comment:/;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,greedy:!0,alias:\"string\"},\"lambda-parameter\":[{pattern:/((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,lookbehind:!0},builtin:{pattern:/((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,lookbehind:!0},operator:{pattern:/((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(e){for(var r in e)e[r]=e[r].replace(/<[\\w\\s]+>/g,(function(r){return\"(?:\"+e[r].trim()+\")\"}));return e[r]}({\"<ureal dec>\":\"\\\\d+(?:/\\\\d+)?|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\"<real dec>\":\"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\"<imaginary dec>\":\"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\"<complex dec>\":\"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\"<num dec>\":\"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\"<ureal box>\":\"[0-9a-f]+(?:/[0-9a-f]+)?\",\"<real box>\":\"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\"<imaginary box>\":\"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\"<complex box>\":\"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\"<num box>\":\"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\"<number>\":\"(^|[\\\\s()])(?:<num dec>|<num box>)(?=[()\\\\s]|$)\"}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()']/}}}]);","name":"static/js/379.e4fd2368.chunk.js","map":{"version":3,"sources":["static/js/379.e4fd2368.chunk.js"],"names":["this","push","509","module","exports","Prism","languages","scheme","comment","string","pattern","greedy","symbol","character","alias","lambda-parameter","lookbehind","keyword","builtin","operator","number","RegExp","r","e","replace","trim","<ureal dec>","<real dec>","<imaginary dec>","<complex dec>","<num dec>","<ureal box>","<real box>","<imaginary box>","<complex box>","<num box>","<number>","boolean","function","identifier","punctuation"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CACvBC,QAAS,uGACTC,OAAQ,CACNC,QAAS,oBACTC,QAAQ,GAEVC,OAAQ,CACNF,QAAS,cACTC,QAAQ,GAEVE,UAAW,CACTH,QAAS,2CACTC,QAAQ,EACRG,MAAO,UAETC,mBAAoB,CAAC,CACnBL,QAAS,8DACTM,YAAY,GACX,CACDN,QAAS,qCACTM,YAAY,IAEdC,QAAS,CACPP,QAAS,8YACTM,YAAY,GAEdE,QAAS,CACPR,QAAS,moDACTM,YAAY,GAEdG,SAAU,CACRT,QAAS,qDACTM,YAAY,GAEdI,OAAQ,CACNV,QAASW,OAAO,SAAUC,GACxB,IAAK,IAAIC,KAAKD,EACZA,EAAEC,GAAKD,EAAEC,GAAGC,QAAQ,cAAc,SAAUD,GAC1C,MAAO,MAAQD,EAAEC,GAAGE,OAAS,OAIjC,OAAOH,EAAEC,GAPK,CAQd,CACAG,cAAe,6DACfC,aAAc,uCACdC,kBAAmB,wCACnBC,gBAAiB,6DACjBC,YAAa,8CACbC,cAAe,2BACfC,aAAc,uCACdC,kBAAmB,wCACnBC,gBAAiB,6DACjBC,YAAa,iDACbC,WAAY,oDACV,KACJpB,YAAY,GAEdqB,QAAS,CACP3B,QAAS,6CACTM,YAAY,GAEdsB,SAAU,CACR5B,QAAS,iEACTM,YAAY,GAEduB,WAAY,CACV7B,QAAS,4CACTM,YAAY,EACZL,QAAQ,GAEV6B,YAAa"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[379],{\n\n/***/ 509:\n/***/ (function(module, exports) {\n\nPrism.languages.scheme = {\n  comment: /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n  string: {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n    greedy: !0\n  },\n  symbol: {\n    pattern: /'[^()#'\\s]+/,\n    greedy: !0\n  },\n  character: {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  \"lambda-parameter\": [{\n    pattern: /((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n    lookbehind: !0\n  }, {\n    pattern: /((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,\n    lookbehind: !0\n  }],\n  keyword: {\n    pattern: /((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n    lookbehind: !0\n  },\n  builtin: {\n    pattern: /((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n    lookbehind: !0\n  },\n  operator: {\n    pattern: /((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n    lookbehind: !0\n  },\n  number: {\n    pattern: RegExp(function (r) {\n      for (var e in r) {\n        r[e] = r[e].replace(/<[\\w\\s]+>/g, function (e) {\n          return \"(?:\" + r[e].trim() + \")\";\n        });\n      }\n\n      return r[e];\n    }({\n      \"<ureal dec>\": \"\\\\d+(?:/\\\\d+)?|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\n      \"<real dec>\": \"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\n      \"<imaginary dec>\": \"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\n      \"<complex dec>\": \"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\n      \"<num dec>\": \"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\n      \"<ureal box>\": \"[0-9a-f]+(?:/[0-9a-f]+)?\",\n      \"<real box>\": \"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\n      \"<imaginary box>\": \"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\n      \"<complex box>\": \"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\n      \"<num box>\": \"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\n      \"<number>\": \"(^|[\\\\s()])(?:<num dec>|<num box>)(?=[()\\\\s]|$)\"\n    }), \"i\"),\n    lookbehind: !0\n  },\n  boolean: {\n    pattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n    lookbehind: !0\n  },\n  function: {\n    pattern: /((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n    lookbehind: !0\n  },\n  identifier: {\n    pattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  punctuation: /[()']/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/node_modules/prismjs/components/prism-scheme.min.js"],"names":["Prism","languages","scheme","comment","string","pattern","greedy","symbol","character","alias","lookbehind","keyword","builtin","operator","number","RegExp","r","e","replace","trim","boolean","function","identifier","punctuation"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAuB;AAACC,SAAO,EAAC,sGAAT;AAAgHC,QAAM,EAAC;AAACC,WAAO,EAAC,mBAAT;AAA6BC,UAAM,EAAC,CAAC;AAArC,GAAvH;AAA+JC,QAAM,EAAC;AAACF,WAAO,EAAC,aAAT;AAAuBC,UAAM,EAAC,CAAC;AAA/B,GAAtK;AAAwME,WAAS,EAAC;AAACH,WAAO,EAAC,0CAAT;AAAoDC,UAAM,EAAC,CAAC,CAA5D;AAA8DG,SAAK,EAAC;AAApE,GAAlN;AAAgS,sBAAmB,CAAC;AAACJ,WAAO,EAAC,6DAAT;AAAuEK,cAAU,EAAC,CAAC;AAAnF,GAAD,EAAuF;AAACL,WAAO,EAAC,oCAAT;AAA8CK,cAAU,EAAC,CAAC;AAA1D,GAAvF,CAAnT;AAAwcC,SAAO,EAAC;AAACN,WAAO,EAAC,6YAAT;AAAuZK,cAAU,EAAC,CAAC;AAAna,GAAhd;AAAs3BE,SAAO,EAAC;AAACP,WAAO,EAAC,koDAAT;AAA4oDK,cAAU,EAAC,CAAC;AAAxpD,GAA93B;AAAyhFG,UAAQ,EAAC;AAACR,WAAO,EAAC,oDAAT;AAA8DK,cAAU,EAAC,CAAC;AAA1E,GAAliF;AAA+mFI,QAAM,EAAC;AAACT,WAAO,EAACU,MAAM,CAAC,UAASC,CAAT,EAAW;AAAC,WAAI,IAAIC,CAAR,IAAaD,CAAb;AAAeA,SAAC,CAACC,CAAD,CAAD,GAAKD,CAAC,CAACC,CAAD,CAAD,CAAKC,OAAL,CAAa,YAAb,EAA0B,UAASD,CAAT,EAAW;AAAC,iBAAM,QAAMD,CAAC,CAACC,CAAD,CAAD,CAAKE,IAAL,EAAN,GAAkB,GAAxB;AAA4B,SAAlE,CAAL;AAAf;;AAAwF,aAAOH,CAAC,CAACC,CAAD,CAAR;AAAY,KAAhH,CAAiH;AAAC,qBAAc,4DAAf;AAA4E,oBAAa,sCAAzF;AAAgI,yBAAkB,uCAAlJ;AAA0L,uBAAgB,4DAA1M;AAAuQ,mBAAY,6CAAnR;AAAiU,qBAAc,0BAA/U;AAA0W,oBAAa,sCAAvX;AAA8Z,yBAAkB,uCAAhb;AAAwd,uBAAgB,4DAAxe;AAAqiB,mBAAY,gDAAjjB;AAAkmB,kBAAW;AAA7mB,KAAjH,CAAD,EAAmxB,GAAnxB,CAAf;AAAuyBP,cAAU,EAAC,CAAC;AAAnzB,GAAtnF;AAA46GU,SAAO,EAAC;AAACf,WAAO,EAAC,4CAAT;AAAsDK,cAAU,EAAC,CAAC;AAAlE,GAAp7G;AAAy/GW,UAAQ,EAAC;AAAChB,WAAO,EAAC,gEAAT;AAA0EK,cAAU,EAAC,CAAC;AAAtF,GAAlgH;AAA2lHY,YAAU,EAAC;AAACjB,WAAO,EAAC,2CAAT;AAAqDK,cAAU,EAAC,CAAC,CAAjE;AAAmEJ,UAAM,EAAC,CAAC;AAA3E,GAAtmH;AAAorHiB,aAAW,EAAC;AAAhsH,CAAvB,C","file":"x","sourcesContent":["Prism.languages.scheme={comment:/;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,greedy:!0,alias:\"string\"},\"lambda-parameter\":[{pattern:/((?:^|[^'`#])\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])\\(lambda\\s+\\()[^()']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,lookbehind:!0},builtin:{pattern:/((?:^|[^'`#])\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,lookbehind:!0},operator:{pattern:/((?:^|[^'`#])\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(r){for(var e in r)r[e]=r[e].replace(/<[\\w\\s]+>/g,function(e){return\"(?:\"+r[e].trim()+\")\"});return r[e]}({\"<ureal dec>\":\"\\\\d+(?:/\\\\d+)?|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\"<real dec>\":\"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\"<imaginary dec>\":\"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\"<complex dec>\":\"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\"<num dec>\":\"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\"<ureal box>\":\"[0-9a-f]+(?:/[0-9a-f]+)?\",\"<real box>\":\"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\"<imaginary box>\":\"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\"<complex box>\":\"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\"<num box>\":\"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\"<number>\":\"(^|[\\\\s()])(?:<num dec>|<num box>)(?=[()\\\\s]|$)\"}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()']/};"]}}