{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.FETCH_CELLS:\n      return state;\n\n    case ActionType.FETCH_CELLS_COMPLETE:\n      return state;\n\n    case ActionType.FETCH_CELLS_ERROR:\n      return state;\n\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_AFTER:\n      //create new cell\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId() // this line took me forever to fix\n\n      };\n      state.data[cell.id] = cell; //cell to data obj\n      //insert into array\n\n      const foundIndex = state.order.findIndex(id => id === action.payload.id); //no id inside our array if less than 0\n\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","FETCH_CELLS","FETCH_CELLS_COMPLETE","FETCH_CELLS_ERROR","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substr"],"mappings":"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","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n    loading: boolean;\n    error: string | null;\n    order: string[];\n    data: {\n        [key: string]: Cell;\n    };\n}\n\nconst initialState: CellsState = {\n    loading: false,\n    error: null,\n    order: [],\n    data: {},\n};\n\nconst reducer = produce((\n    state: CellsState = initialState,\n    action: Action\n    ) => {\n        switch (action.type) {\n            case ActionType.FETCH_CELLS:\n\n                return state;\n\n            case ActionType.FETCH_CELLS_COMPLETE:\n\n                return state;\n\n            case ActionType.FETCH_CELLS_ERROR:\n\n                return state;\n\n            case ActionType.UPDATE_CELL:\n                const { id, content } = action.payload;\n                state.data[id].content = content;\n                return state;\n\n            case ActionType.DELETE_CELL:\n                delete state.data[action.payload];\n                state.order = state.order.filter(id => id !== action.payload);\n                return state;\n\n            case ActionType.MOVE_CELL:\n                const {direction} = action.payload;\n                const index = state.order.findIndex((id) => id === action.payload.id);\n                const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n                if(targetIndex < 0 || targetIndex > state.order.length-1) {\n                    return state;\n                }\n                state.order[index] = state.order[targetIndex];\n                state.order[targetIndex] = action.payload.id;\n                return state;\n\n            case ActionType.INSERT_CELL_AFTER:\n                //create new cell\n                const cell: Cell = {\n                    content: '',\n                    type: action.payload.type,\n                    id: randomId() // this line took me forever to fix\n                }\n\n                state.data[cell.id] = cell;//cell to data obj\n\n                //insert into array\n                const foundIndex = state.order.findIndex(id => id === action.payload.id);\n                //no id inside our array if less than 0\n                if (foundIndex < 0) {\n                    state.order.unshift(cell.id);\n                } else {\n                    state.order.splice(foundIndex+1, 0, cell.id);\n                }\n\n                return state;\n\n            default:\n                return state;\n    }\n});\n\nconst randomId = () => {\n    return Math.random().toString(36).substr(2,5);\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}