{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/add-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './add-cell.css';\nimport { useActions } from \"../hooks/use-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddCell = ({\n  nextCellId\n}) => {\n  _s();\n\n  const {\n    insertCellBefore\n  } = useActions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'code'),\n      children: \"Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'text'),\n      children: \"Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AddCell, \"WCeYMonidkUsrU82gdQi6l0Xt4c=\", false, function () {\n  return [useActions];\n});\n\n_c = AddCell;\nexport default AddCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCell\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/add-cell.tsx"],"names":["useActions","AddCell","nextCellId","insertCellBefore"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAAQA,UAAR,QAA0B,sBAA1B;;;AAMA,MAAMC,OAA+B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAkB;AAAA;;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAuBH,UAAU,EAAvC;AAEA,sBAAO;AAAA,4BACH;AAAQ,MAAA,OAAO,EAAE,MAAMG,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAKH;AAAQ,MAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AASH,CAZD;;GAAMD,O;UAC2BD,U;;;KAD3BC,O;AAcN,eAAeA,OAAf","sourcesContent":["import './add-cell.css';\nimport{ useActions } from \"../hooks/use-actions\";\n\ninterface AddCellProps {\n    nextCellId: string | null;\n}\n\nconst AddCell: React.FC<AddCellProps> = ({nextCellId}) => {\n    const { insertCellBefore } = useActions();\n\n    return <div>\n        <button onClick={() => insertCellBefore(nextCellId, 'code')}>\n            Code\n        </button>\n\n        <button onClick={() => insertCellBefore(nextCellId, 'text')}>\n            Text\n        </button>\n    </div>;\n};\n\nexport default AddCell;\n"]},"metadata":{},"sourceType":"module"}