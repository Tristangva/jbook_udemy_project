{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\n// No in browser stuff from design of app\nimport React, { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from \"./resizable\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  console.log(bundle); //bundling process\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100%-10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initalValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), bundle && /*#__PURE__*/_jsxDEV(Preview, {\n        code: bundle.code,\n        bundlingStatus: bundle.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"DroWIV0zgT19KYs5xK5p8TLtlfo=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx"],"names":["React","useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","console","log","timer","setTimeout","content","clearTimeout","height","display","flexDirection","value","code","err"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA0B,sBAA1B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpD,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA6BL,UAAU,EAA7C;AACA,QAAMM,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAHoD,CAKpD;;AACAV,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMgB,KAAK,GAAGC,UAAU,CAAC,YAAW;AAChCR,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACW,OAAf,CAAZ;AACH,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAM,MAAM;AACRC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACH,KAFD;AAGH,GARQ,EAQN,CAACT,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACM,EAApB,CARM,CAAT;AAUA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAE,UAAtB;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAACO,QAAAA,MAAM,EAAE,iBAAT;AAA4BC,QAAAA,OAAO,EAAE,MAArC;AAA6CC,QAAAA,aAAa,EAAE;AAA5D,OAAZ;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,YAAtB;AAAA,+BACI,QAAC,UAAD;AACI,UAAA,WAAW,EAAEf,IAAI,CAACW,OADtB;AAEI,UAAA,QAAQ,EAAGK,KAAD,IAAWf,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUU,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAOKb,MAAM,iBAAI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEA,MAAM,CAACc,IAAtB;AAA4B,QAAA,cAAc,EAAEd,MAAM,CAACe;AAAnD;AAAA;AAAA;AAAA;AAAA,cAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CA7BD;;GAAMnB,Q;UACiCF,U,EACpBC,gB;;;KAFbC,Q;AA+BN,eAAeA,QAAf","sourcesContent":["// No in browser stuff from design of app\n\nimport React, { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from \"./resizable\";\nimport { Cell } from '../state';\nimport { useActions} from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\n\ninterface CodeCellProps {\n    cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const {updateCell, createBundle} = useActions();\n    const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n    console.log(bundle)\n\n    //bundling process\n    useEffect(()=> {\n        const timer = setTimeout(async ()=> {\n            createBundle(cell.id, cell.content);\n        }, 750);\n\n        return() => {\n            clearTimeout(timer);\n        };\n    }, [cell.content, cell.id]);\n\n    return (\n        <Resizable direction={\"vertical\"}>\n            <div style={{height: 'calc(100%-10px)', display: 'flex', flexDirection: 'row'}}>\n                <Resizable direction={\"horizontal\"}>\n                    <CodeEditor\n                        initalValue={cell.content}\n                        onChange={(value) => updateCell(cell.id, value)}\n                    />\n                </Resizable>\n                {bundle && <Preview code={bundle.code} bundlingStatus={bundle.err} />}\n            </div>\n        </Resizable>\n    );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}