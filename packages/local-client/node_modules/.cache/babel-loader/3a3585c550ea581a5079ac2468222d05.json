{"ast":null,"code":"import axios from \"axios\";\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = input => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: input\n          };\n        } //check to see if we have already fetched this file\n\n\n        const cachedResult = await fileCache.getItem(args.path); //and if it is, return immediately\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, request);\n        return result; //vales stored\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","fetchPlugin","input","setup","build","onLoad","filter","args","path","loader","contents","cachedResult","getItem","data","request","get","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAKA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAC1C,SAAM;AACFF,IAAAA,IAAI,EAAE,cADJ;;AAEFG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9BA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAAqB;AAEhD,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AACHC,YAAAA,MAAM,EAAE,KADL;AAEHC,YAAAA,QAAQ,EAAER;AAFP,WAAP;AAIH,SAP+C,CAShD;;;AACA,cAAMS,YAAY,GAAG,MAAMb,SAAS,CAACc,OAAV,CAAwCL,IAAI,CAACC,IAA7C,CAA3B,CAVgD,CAYhD;;AACA,YAAIG,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;;AACD,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAMlB,KAAK,CAACmB,GAAN,CAAUR,IAAI,CAACC,IAAf,CAA/B,CAhBgD,CAiBhD;;AAEA,cAAMQ,MAA4B,GAAG;AACjCP,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEG,IAFuB;AAGjCI,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcJ,OAAO,CAACK,WAAtB,EAAmCC;AAHd,SAArC,CAnBgD,CAwBhD;;AACA,cAAMtB,SAAS,CAACuB,OAAV,CAAkBd,IAAI,CAACC,IAAvB,EAA6BM,OAA7B,CAAN;AAEA,eAAOE,MAAP,CA3BgD,CA4BhD;AACH,OA7BD;AA8BH;;AAjCC,GAAN;AAmCH,CApCM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport axios from \"axios\";\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache'\n});\n\n\nexport const fetchPlugin = (input: string) => {\n    return{\n        name: 'fetch-plugin',\n        setup(build: esbuild.PluginBuild) {\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n\n                if (args.path === 'index.js') {\n                    return {\n                        loader: 'jsx',\n                        contents: input,\n                    };\n                }\n\n                //check to see if we have already fetched this file\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n                //and if it is, return immediately\n                if (cachedResult) {\n                    return cachedResult;\n                }\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, request);\n\n                return result;\n                //vales stored\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}