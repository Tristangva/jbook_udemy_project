{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/cell-list.tsx\";\nimport { Fragment } from \"react\";\nimport { usedTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from \"./add-cell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  const cells = usedTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => {\n    return order.map(id => {\n      return data[id];\n    });\n  });\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)]\n  }, cell.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedCells, /*#__PURE__*/_jsxDEV(AddCell, {\n      forceVisible: cells.length === 0,\n      nextCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/cell-list.tsx"],"names":["Fragment","usedTypedSelector","CellListItem","AddCell","CellList","cells","order","data","map","id","renderedCells","cell","length"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,iBAAR,QAAgC,6BAAhC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC7B,QAAMC,KAAK,GAAGJ,iBAAiB,CAAC,CAAC;AAACI,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAR,GAAD,KAA6B;AACzD,WAAOD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQ;AACrB,aAAOF,IAAI,CAACE,EAAD,CAAX;AACH,KAFM,CAAP;AAGH,GAJ8B,CAA/B;AAMA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,iBAC5B,QAAC,QAAD;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,UAAU,EAAEA,IAAI,CAACF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAA4B,MAAA,IAAI,EAAEE;AAAlC,OAAmBA,IAAI,CAACF,EAAxB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,KAAeE,IAAI,CAACF,EAApB;AAAA;AAAA;AAAA;AAAA,UADkB,CAAtB;AAOA,sBACI;AAAA,eACKC,aADL,eAEI,QAAC,OAAD;AAAS,MAAA,YAAY,EAAEL,KAAK,CAACO,MAAN,KAAiB,CAAxC;AAA2C,MAAA,UAAU,EAAE;AAAvD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApBD;;KAAMR,Q;AAsBN,eAAeA,QAAf","sourcesContent":["import {Fragment} from \"react\";\nimport {usedTypedSelector} from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from \"./add-cell\";\n\nconst CellList: React.FC = () => {\n    const cells = usedTypedSelector(({cells: { order, data} })=> {\n        return order.map((id) => {\n            return data[id];\n        });\n    });\n\n    const renderedCells = cells.map((cell) => (\n        <Fragment key={cell.id}>\n            <AddCell nextCellId={cell.id} />\n            <CellListItem key={cell.id} cell={cell} />\n        </Fragment>\n    ));\n\n    return (\n        <div>\n            {renderedCells}\n            <AddCell forceVisible={cells.length === 0} nextCellId={null} /> {/* Add cell at the bottom with null */}\n        </div>\n    )\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}