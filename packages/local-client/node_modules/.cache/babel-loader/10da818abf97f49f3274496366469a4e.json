{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from '../action-types';\nimport bundle from '../../bundler';\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCells = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get('/cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.FETCH_CELLS_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};\nexport const saveCells = () => {\n  return async (dispatch, getState) => {\n    const {\n      cells: {\n        data,\n        order\n      }\n    } = getState();\n    const cells = order.map(id => data[id]);\n\n    try {\n      await axios.post('/cells', {\n        cells\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SAVE_CELLS_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/state/action-creators/index.ts"],"names":["axios","ActionType","bundle","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","data","get","FETCH_CELLS_COMPLETE","err","FETCH_CELLS_ERROR","message","saveCells","getState","cells","order","map","post","SAVE_CELLS_ERROR"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport { ActionType } from '../action-types';\nimport {\n  UpdateCellAction,\n  DeleteCellAction,\n  MoveCellAction,\n  InsertCellAfterAction,\n  Direction,\n  Action,\n} from '../actions';\nimport { Cell, CellTypes } from '../cell';\nimport bundle from '../../bundler';\nimport { RootState } from '../reducers';\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n\nexport const fetchCells = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_CELLS });\n\n    try {\n      const { data }: { data: Cell[] } = await axios.get('/cells');\n\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.FETCH_CELLS_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n\nexport const saveCells = () => {\n  return async (dispatch: Dispatch<Action>, getState: () => RootState) => {\n    const {\n      cells: { data, order },\n    } = getState();\n\n    const cells = order.map((id) => data[id]);\n\n    try {\n      await axios.post('/cells', { cells });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SAVE_CELLS_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}