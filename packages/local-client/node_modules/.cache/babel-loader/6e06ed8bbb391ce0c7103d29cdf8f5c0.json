{"ast":null,"code":"import axios from \"axios\";\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = input => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: 'jsx',\n          contents: input\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        //check to see if we have already fetched this file\n        const cachedResult = await fileCache.getItem(args.path); //and if it is, return immediately\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n      });\n      build.onLoad({\n        filter: /.css$/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n        const contents = `\n                            const style = document.createElement('style');\n                            style.innerText = '${escaped}';\n                            document.head.appendChild(style);\n                        `;\n        const result = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, result);\n        return result; //vales stored\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, result);\n        return result; //vales stored\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","fetchPlugin","input","setup","build","onLoad","filter","loader","contents","args","cachedResult","getItem","path","data","request","get","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAKA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAC1C,SAAM;AACFF,IAAAA,IAAI,EAAE,cADJ;;AAEFG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9BA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAb,EAAwC,MAAK;AACzC,eAAO;AACHC,UAAAA,MAAM,EAAE,KADL;AAEHC,UAAAA,QAAQ,EAAEN;AAFP,SAAP;AAIH,OALD;AAOAE,MAAAA,KAAK,CAACC,MAAN,CAAa;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAb,EAA6B,MAAOG,IAAP,IAAoB;AAC7C;AACA,cAAMC,YAAY,GAAG,MAAMZ,SAAS,CAACa,OAAV,CAAwCF,IAAI,CAACG,IAA7C,CAA3B,CAF6C,CAI7C;;AACA,YAAIF,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;AACJ,OARD;AAUAN,MAAAA,KAAK,CAACC,MAAN,CAAa;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAb,EAAgC,MAAOG,IAAP,IAAqB;AAEjD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAA/B,CAFiD,CAGjD;;AAEA,cAAMI,OAAO,GAAGH,IAAI,CACfI,OADW,CACH,KADG,EACI,EADJ,EAEXA,OAFW,CAEH,IAFG,EAEG,KAFH,EAGXA,OAHW,CAGH,IAHG,EAGG,KAHH,CAAhB;AAKA,cAAMT,QAAQ,GACL;AACzB;AACA,iDAAiDQ,OAAQ;AACzD;AACA,yBALgB;AAOA,cAAME,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAFiC;AAGjCW,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHd,SAArC,CAjBiD,CAsBjD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP,CAzBiD,CA0BjD;AACH,OA3BD;AA6BAd,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAEhD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAA/B,CAFgD,CAGhD;;AAEA,cAAMM,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEK,IAFuB;AAGjCM,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHd,SAArC,CALgD,CAUhD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP,CAbgD,CAchD;AACH,OAfD;AAgBH;;AAjEC,GAAN;AAmEH,CApEM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport axios from \"axios\";\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache'\n});\n\n\nexport const fetchPlugin = (input: string) => {\n    return{\n        name: 'fetch-plugin',\n        setup(build: esbuild.PluginBuild) {\n            build.onLoad({filter: /(^index\\.js$)/}, ()=> {\n                return {\n                    loader: 'jsx',\n                    contents: input,\n                };\n            });\n\n            build.onLoad({filter: /.*/}, async (args: any) =>{\n                //check to see if we have already fetched this file\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n                //and if it is, return immediately\n                if (cachedResult) {\n                    return cachedResult;\n                }\n            });\n\n            build.onLoad({filter: /.css$/}, async (args: any) => {\n\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const escaped = data\n                    .replace(/\\n/g, '')\n                    .replace(/\"/g, '\\\\\"')\n                    .replace(/'/g, \"\\\\'\");\n\n                const contents =\n                        `\n                            const style = document.createElement('style');\n                            style.innerText = '${escaped}';\n                            document.head.appendChild(style);\n                        `;\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, result);\n\n                return result;\n                //vales stored\n            });\n\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, result);\n\n                return result;\n                //vales stored\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}