{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.SAVE_CELLS_ERROR:\n      state.error = action.payload;\n      return state;\n\n    case ActionType.FETCH_CELLS:\n      state.loading = true;\n      state.error = null;\n      return state;\n\n    case ActionType.FETCH_CELLS_COMPLETE:\n      state.order = action.payload.map(cell => cell.id);\n      state.data = action.payload.reduce((acc, cell) => {\n        acc[cell.id] = cell;\n        return acc;\n      }, {});\n      return state;\n\n    case ActionType.FETCH_CELLS_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_AFTER:\n      //create new cell\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId() // this line took me forever to fix\n\n      };\n      state.data[cell.id] = cell; //cell to data obj\n      //insert into array\n\n      const foundIndex = state.order.findIndex(id => id === action.payload.id); //no id inside our array if less than 0\n\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/tristanwhite/Projects/jbook/packages/local-client/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","SAVE_CELLS_ERROR","payload","FETCH_CELLS","FETCH_CELLS_COMPLETE","map","cell","id","reduce","acc","FETCH_CELLS_ERROR","UPDATE_CELL","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","randomId","foundIndex","unshift","splice","Math","random","toString","substr"],"mappings":"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","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n    loading: boolean;\n    error: string | null;\n    order: string[];\n    data: {\n        [key: string]: Cell;\n    };\n}\n\nconst initialState: CellsState = {\n    loading: false,\n    error: null,\n    order: [],\n    data: {},\n};\n\nconst reducer = produce((\n    state: CellsState = initialState,\n    action: Action\n    ) => {\n        switch (action.type) {\n            case ActionType.SAVE_CELLS_ERROR:\n                state.error = action.payload;\n                return state;\n            case ActionType.FETCH_CELLS:\n                state.loading = true;\n                state.error = null;\n                return state;\n\n            case ActionType.FETCH_CELLS_COMPLETE:\n                state.order = action.payload.map(cell => cell.id);\n                state.data = action.payload.reduce((acc, cell) => {\n                   acc[cell.id]  = cell;\n                   return acc;\n                }, {} as CellsState['data']);\n                return state;\n\n            case ActionType.FETCH_CELLS_ERROR:\n                state.loading = false;\n                state.error = action.payload;\n                return state;\n\n            case ActionType.UPDATE_CELL:\n                const { id, content } = action.payload;\n                state.data[id].content = content;\n                return state;\n\n            case ActionType.DELETE_CELL:\n                delete state.data[action.payload];\n                state.order = state.order.filter(id => id !== action.payload);\n                return state;\n\n            case ActionType.MOVE_CELL:\n                const {direction} = action.payload;\n                const index = state.order.findIndex((id) => id === action.payload.id);\n                const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n                if(targetIndex < 0 || targetIndex > state.order.length-1) {\n                    return state;\n                }\n                state.order[index] = state.order[targetIndex];\n                state.order[targetIndex] = action.payload.id;\n                return state;\n\n            case ActionType.INSERT_CELL_AFTER:\n                //create new cell\n                const cell: Cell = {\n                    content: '',\n                    type: action.payload.type,\n                    id: randomId() // this line took me forever to fix\n                }\n\n                state.data[cell.id] = cell;//cell to data obj\n\n                //insert into array\n                const foundIndex = state.order.findIndex(id => id === action.payload.id);\n                //no id inside our array if less than 0\n                if (foundIndex < 0) {\n                    state.order.unshift(cell.id);\n                } else {\n                    state.order.splice(foundIndex+1, 0, cell.id);\n                }\n\n                return state;\n\n            default:\n                return state;\n    }\n});\n\nconst randomId = () => {\n    return Math.random().toString(36).substr(2,5);\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}