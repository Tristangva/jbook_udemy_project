{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\n// No in browser stuff from design of app\nimport { useState, useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [err, setErr] = useState('');\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(cell.content);\n      setCode(output.code);\n      setErr(output.err);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initalValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        bundlingStatus: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"qkTsuoMb24prTEAY30ewwlfowq8=\", false, function () {\n  return [useActions];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx"],"names":["useState","useEffect","CodeEditor","Preview","bundle","Resizable","useActions","CodeCell","cell","code","setCode","err","setErr","updateCell","timer","setTimeout","output","content","clearTimeout","height","display","flexDirection","value","id"],"mappings":";;;AAAA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAiBP,UAAU,EAAjC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,KAAK,GAAGC,UAAU,CAAC,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAMZ,MAAM,CAACI,IAAI,CAACS,OAAN,CAA3B;AACAP,MAAAA,OAAO,CAACM,MAAM,CAACP,IAAR,CAAP;AACAG,MAAAA,MAAM,CAACI,MAAM,CAACL,GAAR,CAAN;AACH,KAJuB,EAIrB,GAJqB,CAAxB;AAMA,WAAO,MAAM;AACTO,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAFD;AAGH,GAVQ,EAUN,CAACN,IAAI,CAACS,OAAN,CAVM,CAAT;AAYA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACI;AACI,MAAA,KAAK,EAAE;AACHE,QAAAA,MAAM,EAAE,mBADL;AAEHC,QAAAA,OAAO,EAAE,MAFN;AAGHC,QAAAA,aAAa,EAAE;AAHZ,OADX;AAAA,8BAOI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACI,QAAC,UAAD;AACI,UAAA,WAAW,EAAEb,IAAI,CAACS,OADtB;AAEI,UAAA,QAAQ,EAAGK,KAAD,IAAWT,UAAU,CAACL,IAAI,CAACe,EAAN,EAAUD,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ,eAaI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEb,IAAf;AAAqB,QAAA,cAAc,EAAEE;AAArC;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CApCD;;GAAMJ,Q;UAGqBD,U;;;KAHrBC,Q;AAsCN,eAAeA,QAAf","sourcesContent":["// No in browser stuff from design of app\n\nimport { useState, useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface CodeCellProps {\n    cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const [code, setCode] = useState('');\n    const [err, setErr] = useState('');\n    const { updateCell } = useActions();\n\n    useEffect(() => {\n        const timer = setTimeout(async () => {\n            const output = await bundle(cell.content);\n            setCode(output.code);\n            setErr(output.err);\n        }, 750);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [cell.content]);\n\n    return (\n        <Resizable direction=\"vertical\">\n            <div\n                style={{\n                    height: 'calc(100% - 10px)',\n                    display: 'flex',\n                    flexDirection: 'row',\n                }}\n            >\n                <Resizable direction=\"horizontal\">\n                    <CodeEditor\n                        initalValue={cell.content}\n                        onChange={(value) => updateCell(cell.id, value)}\n                    />\n                </Resizable>\n                <Preview code={code} bundlingStatus={err} />\n            </div>\n        </Resizable>\n    );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}