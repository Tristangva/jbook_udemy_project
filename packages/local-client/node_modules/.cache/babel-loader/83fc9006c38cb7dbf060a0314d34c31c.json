{"ast":null,"code":"import { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      return { ...state,\n        data: { ...state.data,\n          [id]: { ...state.data[id],\n            content\n          }\n        }\n      };\n\n    case ActionType.DELETE_CELL:\n      return state;\n\n    case ActionType.MOVE_CELL:\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/state/reducers/cellsReducer.ts"],"names":["ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","MOVE_CELL","INSERT_CELL_BEFORE"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AAaA,MAAMC,YAAwB,GAAG;AAC7BC,EAAAA,OAAO,EAAE,KADoB;AAE7BC,EAAAA,KAAK,EAAE,IAFsB;AAG7BC,EAAAA,KAAK,EAAE,EAHsB;AAI7BC,EAAAA,IAAI,EAAE;AAJuB,CAAjC;;AAOA,MAAMC,OAAO,GAAG,CACZC,KAAiB,GAAGN,YADR,EAEZO,MAFY,KAGC;AACb,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,UAAU,CAACU,WAAhB;AACI,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AAEA,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,IAAI,EAAE,EACF,GAAGE,KAAK,CAACF,IADP;AAEF,WAACM,EAAD,GAAM,EACF,GAAGJ,KAAK,CAACF,IAAN,CAAWM,EAAX,CADD;AAEFC,YAAAA;AAFE;AAFJ;AAFH,OAAP;;AAUJ,SAAKZ,UAAU,CAACc,WAAhB;AACI,aAAOP,KAAP;;AACJ,SAAKP,UAAU,CAACe,SAAhB;AACI,aAAOR,KAAP;;AACJ,SAAKP,UAAU,CAACgB,kBAAhB;AACI,aAAOT,KAAP;;AACJ;AACI,aAAOA,KAAP;AArBR;AAuBH,CA3BD;;AA6BA,eAAeD,OAAf","sourcesContent":["import { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n    loading: boolean;\n    error: string | null;\n    order: string[];\n    data: {\n        [key: string]: Cell;\n    };\n}\n\nconst initialState: CellsState = {\n    loading: false,\n    error: null,\n    order: [],\n    data: {},\n};\n\nconst reducer = (\n    state: CellsState = initialState,\n    action: Action\n): CellsState => {\n    switch (action.type) {\n        case ActionType.UPDATE_CELL:\n            const { id, content } = action.payload;\n\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    [id]: {\n                        ...state.data[id],\n                        content,\n                    },\n                },\n            };\n        case ActionType.DELETE_CELL:\n            return state;\n        case ActionType.MOVE_CELL:\n            return state;\n        case ActionType.INSERT_CELL_BEFORE:\n            return state;\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}