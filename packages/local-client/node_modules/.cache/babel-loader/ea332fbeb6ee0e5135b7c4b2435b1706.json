{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{useTypedSelector}from\"./use-typed-selector\";export var useCumulativeCode=function useCumulativeCode(cellId){// creates array of code strings for lower cells to access previous cells code\nreturn useTypedSelector(function(state){var _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;var orderedCells=order.map(function(id){return data[id];});// allows values to print in preview\n// React + Dom is added to make sure react components chan show with show()\nvar showFunc=\"\\n        import _React from 'react';\\n        import _ReactDOM from 'react-dom';\\n        var show = (value) => {\\n          const root = document.querySelector('#root');\\n    \\n          if (typeof value === 'object') {\\n            if (value.$$typeof && value.props) {\\n              _ReactDOM.render(value, root);\\n            } else {\\n              root.innerHTML = JSON.stringify(value);\\n            }\\n          } else {\\n            root.innerHTML = value;\\n          }\\n        };\\n      \";var showFuncNoop='var show = () => {}';var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderedCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;if(c.type==='code'){if(c.id===cellId){cumulativeCode.push(showFunc);}else{cumulativeCode.push(showFuncNoop);}cumulativeCode.push(c.content);}//checks if current cell\nif(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join('\\n');};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":"2MAAA,OAAQA,gBAAR,KAA+B,sBAA/B,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAoB,CAEjD;AACA,MAAQF,CAAAA,gBAAgB,CAAC,SAACG,KAAD,CAAW,CAChC,iBAAsBA,KAAK,CAACC,KAA5B,CAAOC,IAAP,cAAOA,IAAP,CAAaC,KAAb,cAAaA,KAAb,CACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAACC,EAAD,QAAQJ,CAAAA,IAAI,CAACI,EAAD,CAAZ,EAAV,CAArB,CAEA;AACA;AACA,GAAMC,CAAAA,QAAQ,sfAAd,CAkBA,GAAMC,CAAAA,YAAY,CAAG,qBAArB,CAEA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CA1BgC,yCA2BlBL,YA3BkB,YA2BhC,+CAA4B,IAAnBM,CAAAA,CAAmB,aACxB,GAAGA,CAAC,CAACC,IAAF,GAAW,MAAd,CAAsB,CAClB,GAAID,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACjBU,cAAc,CAACG,IAAf,CAAoBL,QAApB,EACH,CAFD,IAEO,CACHE,cAAc,CAACG,IAAf,CAAoBJ,YAApB,EACH,CACDC,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB,EACH,CACD;AACA,GAAIH,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACjB,MACH,CACJ,CAxC+B,qDAyChC,MAAOU,CAAAA,cAAP,CACH,CA1CuB,CAAhB,CA0CLK,IA1CK,CA0CA,IA1CA,CAAR,CA2CH,CA9CM","sourcesContent":["import {useTypedSelector} from \"./use-typed-selector\";\n\nexport const useCumulativeCode = (cellId: string) => {\n\n    // creates array of code strings for lower cells to access previous cells code\n    return  useTypedSelector((state) => {\n        const {data, order} = state.cells;\n        const orderedCells = order.map((id) => data[id]);\n\n        // allows values to print in preview\n        // React + Dom is added to make sure react components chan show with show()\n        const showFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var show = (value) => {\n          const root = document.querySelector('#root');\n    \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n              root.innerHTML = JSON.stringify(value);\n            }\n          } else {\n            root.innerHTML = value;\n          }\n        };\n      `;\n\n        const showFuncNoop = 'var show = () => {}';\n\n        const cumulativeCode = [];\n        for (let c of orderedCells) {\n            if(c.type === 'code') {\n                if (c.id === cellId) {\n                    cumulativeCode.push(showFunc);\n                } else {\n                    cumulativeCode.push(showFuncNoop)\n                }\n                cumulativeCode.push(c.content);\n            }\n            //checks if current cell\n            if (c.id === cellId) {\n                break;\n            }\n        }\n        return cumulativeCode;\n    }).join('\\n');\n}\n"]},"metadata":{},"sourceType":"module"}