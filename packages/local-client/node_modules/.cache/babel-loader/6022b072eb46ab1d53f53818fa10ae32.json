{"ast":null,"code":"import axios from 'axios';\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const unpkgPathPlugin = inputCode => {\n  return {\n    name: 'unpkg-path-plugin',\n\n    setup(build) {\n      // Handle root entry file of 'index.js'\n      build.onResolve({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          path: 'index.js',\n          namespace: 'a'\n        };\n      }); // Handle relative paths in a module\n\n      build.onResolve({\n        filter: /^\\.+\\//\n      }, args => {\n        return {\n          namespace: 'a',\n          path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href\n        };\n      }); // Handle main file of a module\n\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: inputCode\n          };\n        }\n\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/unpkg-path-plugins.ts"],"names":["axios","localForage","fileCache","createInstance","name","unpkgPathPlugin","inputCode","setup","build","onResolve","filter","path","namespace","args","URL","resolveDir","href","onLoad","console","log","loader","contents","cachedResult","getItem","data","request","get","result","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAIA,OAAO,MAAMC,eAAe,GAAIC,SAAD,IAAuB;AAClD,SAAO;AACHF,IAAAA,IAAI,EAAE,mBADH;;AAEHG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9B;AACAA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAA6C,MAAM;AAC/C,eAAO;AAAEC,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,SAAS,EAAE;AAA/B,SAAP;AACH,OAFD,EAF8B,CAM9B;;AACAJ,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAuCG,IAAD,IAAe;AACjD,eAAO;AACHD,UAAAA,SAAS,EAAE,GADR;AAEHD,UAAAA,IAAI,EAAE,IAAIG,GAAJ,CAAQD,IAAI,CAACF,IAAb,EAAmB,sBAAsBE,IAAI,CAACE,UAA3B,GAAwC,GAA3D,EACDC;AAHF,SAAP;AAKH,OAND,EAP8B,CAe9B;;AACAR,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOG,IAAP,IAAqB;AACnD,eAAO;AACHD,UAAAA,SAAS,EAAE,GADR;AAEHD,UAAAA,IAAI,EAAG,qBAAoBE,IAAI,CAACF,IAAK;AAFlC,SAAP;AAIH,OALD;AAOAH,MAAAA,KAAK,CAACS,MAAN,CAAa;AAAEP,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAChDK,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,IAAtB;;AAEA,YAAIA,IAAI,CAACF,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AACHS,YAAAA,MAAM,EAAE,KADL;AAEHC,YAAAA,QAAQ,EAAEf;AAFP,WAAP;AAIH;;AAED,cAAMgB,YAAY,GAAG,MAAMpB,SAAS,CAACqB,OAAV,CACvBV,IAAI,CAACF,IADkB,CAA3B;;AAIA,YAAIW,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;;AACD,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMzB,KAAK,CAAC0B,GAAN,CAAUb,IAAI,CAACF,IAAf,CAAhC;AAEA,cAAMgB,MAA4B,GAAG;AACjCP,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEG,IAFuB;AAGjCT,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcW,OAAO,CAACG,WAAtB,EAAmCC;AAHd,SAArC;AAKA,cAAM3B,SAAS,CAAC4B,OAAV,CAAkBjB,IAAI,CAACF,IAAvB,EAA6BgB,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACH,OA3BD;AA4BH;;AArDE,GAAP;AAuDH,CAxDM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache',\n});\n\nexport const unpkgPathPlugin = (inputCode: string) => {\n    return {\n        name: 'unpkg-path-plugin',\n        setup(build: esbuild.PluginBuild) {\n            // Handle root entry file of 'index.js'\n            build.onResolve({ filter: /(^index\\.js$)/ }, () => {\n                return { path: 'index.js', namespace: 'a' };\n            });\n\n            // Handle relative paths in a module\n            build.onResolve({ filter: /^\\.+\\// }, (args: any) => {\n                return {\n                    namespace: 'a',\n                    path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/')\n                        .href,\n                };\n            });\n\n            // Handle main file of a module\n            build.onResolve({ filter: /.*/ }, async (args: any) => {\n                return {\n                    namespace: 'a',\n                    path: `https://unpkg.com/${args.path}`,\n                };\n            });\n\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n                console.log('onLoad', args);\n\n                if (args.path === 'index.js') {\n                    return {\n                        loader: 'jsx',\n                        contents: inputCode,\n                    };\n                }\n\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(\n                    args.path\n                );\n\n                if (cachedResult) {\n                    return cachedResult;\n                }\n                const { data, request } = await axios.get(args.path);\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname,\n                };\n                await fileCache.setItem(args.path, result);\n\n                return result;\n            });\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}