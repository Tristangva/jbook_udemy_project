{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/Projects/jbook/packages/local-client/src/components/cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport './cell-list.css';\nimport { Fragment, useEffect } from 'react';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItem from './cell-list-item';\nimport AddCell from './add-cell';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => order.map(id => data[id]));\n  const {\n    fetchCells\n  } = useActions();\n  useEffect(() => {\n    fetchCells();\n  }, []);\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddCell, {\n      previousCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, cell.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-list\",\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      forceVisible: cells.length === 0,\n      previousCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), renderedCells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CellList, \"+4UTfgvnGttnopBuhjlqc1LUYkg=\", false, function () {\n  return [useTypedSelector, useActions];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/tristanwhite/Projects/jbook/packages/local-client/src/components/cell-list.tsx"],"names":["Fragment","useEffect","useTypedSelector","CellListItem","AddCell","useActions","CellList","cells","order","data","map","id","fetchCells","renderedCells","cell","length"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,KAAK,GAAGL,gBAAgB,CAAC,CAAC;AAAEK,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAT,GAAD,KAC3BD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAD0B,CAA9B;AAGA,QAAM;AAAEC,IAAAA;AAAF,MAAiBP,UAAU,EAAjC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,aAAa,GAAGN,KAAK,CAACG,GAAN,CAAWI,IAAD,iBAC5B,QAAC,QAAD;AAAA,4BACI,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,cAAc,EAAEA,IAAI,CAACH;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,KAAeG,IAAI,CAACH,EAApB;AAAA;AAAA;AAAA;AAAA,UADkB,CAAtB;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,YAAY,EAAEJ,KAAK,CAACQ,MAAN,KAAiB,CAAxC;AAA2C,MAAA,cAAc,EAAE;AAA3D;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,aAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAvBD;;GAAMP,Q;UACYJ,gB,EAGSG,U;;;KAJrBC,Q;AAyBN,eAAeA,QAAf","sourcesContent":["import './cell-list.css';\nimport { Fragment, useEffect } from 'react';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItem from './cell-list-item';\nimport AddCell from './add-cell';\nimport { useActions } from '../hooks/use-actions';\n\nconst CellList: React.FC = () => {\n    const cells = useTypedSelector(({ cells: { order, data } }) =>\n        order.map((id) => data[id])\n    );\n    const { fetchCells } = useActions();\n\n    useEffect(() => {\n        fetchCells();\n    }, []);\n\n    const renderedCells = cells.map((cell) => (\n        <Fragment key={cell.id}>\n            <CellListItem cell={cell} />\n            <AddCell previousCellId={cell.id} />\n        </Fragment>\n    ));\n\n    return (\n        <div className=\"cell-list\">\n            <AddCell forceVisible={cells.length === 0} previousCellId={null} />\n            {renderedCells}\n        </div>\n    );\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}