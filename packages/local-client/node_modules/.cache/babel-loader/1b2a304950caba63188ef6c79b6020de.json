{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-editor.css';\nimport React, { useRef } from \"react\";\nimport MonacoEditor from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = ({\n  onChange,\n  initalValue\n}) => {\n  _s();\n\n  const editorRef = useRef();\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  const onFormatClick = () => {\n    //get current value from editor\n    const unformatted = editorRef.current.getModel().getValue(); //format that value\n\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, ''); //set the formated value back in the editor\n\n    editorRef.current.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initalValue,\n      language: \"javascript\",\n      height: \"500px\",\n      theme: \"dark\",\n      options: {\n        wordWrap: 'on',\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-editor.tsx"],"names":["React","useRef","MonacoEditor","prettier","parser","CodeEditor","onChange","initalValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAOC,YAAP,MAA2C,sBAA3C;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;;AAOA,MAAMC,UAAqC,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA4B;AAAA;;AAEtE,QAAMC,SAAS,GAAGP,MAAM,EAAxB;;AACA,QAAMQ,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACjEH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAI;AACrCP,MAAAA,QAAQ,CAACI,QAAQ,EAAT,CAAR;AACH,KAFD;AAIA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAvC;AACH,GAPD;;AASA,QAAMC,aAAa,GAAG,MAAM;AACxB;AACA,UAAMC,WAAW,GAAGV,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAFwB,CAIxB;;AACA,UAAMS,SAAS,GAAGhB,QAAQ,CAACiB,MAAT,CAAgBF,WAAhB,EAA6B;AAC3Cd,MAAAA,MAAM,EAAE,OADmC;AAE3CiB,MAAAA,OAAO,EAAE,CAACjB,MAAD,CAFkC;AAG3CkB,MAAAA,OAAO,EAAE,KAHkC;AAI3CC,MAAAA,IAAI,EAAE,IAJqC;AAK3CC,MAAAA,WAAW,EAAE;AAL8B,KAA7B,EAMfC,OANe,CAMP,KANO,EAMA,EANA,CAAlB,CALwB,CAaxB;;AACAjB,IAAAA,SAAS,CAACI,OAAV,CAAkBc,QAAlB,CAA2BP,SAA3B;AAEH,GAhBD;;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAE,gBAAhB;AAAA,4BACI;AAAQ,MAAA,SAAS,EAAE,0CAAnB;AACQ,MAAA,OAAO,EAAEF,aADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,YAAD;AACI,MAAA,cAAc,EAAER,gBADpB;AAEI,MAAA,KAAK,EAAEF,WAFX;AAGI,MAAA,QAAQ,EAAE,YAHd;AAII,MAAA,MAAM,EAAE,OAJZ;AAKI,MAAA,KAAK,EAAE,MALX;AAMI,MAAA,OAAO,EAAE;AACLoB,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFJ;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,mBAAmB,EAAE,CALhB;AAMLC,QAAAA,QAAQ,EAAE,EANL;AAOLC,QAAAA,oBAAoB,EAAE,KAPjB;AAQLC,QAAAA,eAAe,EAAE;AARZ;AANb;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CArDD;;GAAM9B,U;;KAAAA,U;AAuDN,eAAeA,UAAf","sourcesContent":["import './code-editor.css';\nimport React, {useRef} from \"react\";\nimport MonacoEditor, {EditorDidMount} from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\n\ninterface CodeEditorProps {\n    initalValue: string;\n    onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({onChange, initalValue}) =>{\n\n    const editorRef = useRef<any>();\n    const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n        editorRef.current = monacoEditor;\n        monacoEditor.onDidChangeModelContent(()=>{\n            onChange(getValue());\n        })\n\n        monacoEditor.getModel()?.updateOptions({tabSize: 2});\n    };\n\n    const onFormatClick = () => {\n        //get current value from editor\n        const unformatted = editorRef.current.getModel().getValue();\n\n        //format that value\n        const formatted = prettier.format(unformatted, {\n            parser: 'babel',\n            plugins: [parser],\n            useTabs: false,\n            semi: true,\n            singleQuote: true\n        }).replace(/\\n$/, '');\n\n        //set the formated value back in the editor\n        editorRef.current.setValue(formatted);\n\n    };\n\n    return (\n        <div className={\"editor-wrapper\"}>\n            <button className={\"button button-format is-primary is-small\"}\n                    onClick={onFormatClick}>Format</button>\n            <MonacoEditor\n                editorDidMount={onEditorDidMount}\n                value={initalValue}\n                language={\"javascript\"}\n                height={\"500px\"}\n                theme={\"dark\"}\n                options={{\n                    wordWrap: 'on',\n                    minimap: { enabled: false},\n                    showUnused: false,\n                    folding: false,\n                    lineNumbersMinChars: 3,\n                    fontSize: 16,\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                }}\n            />\n        </div>\n        );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}