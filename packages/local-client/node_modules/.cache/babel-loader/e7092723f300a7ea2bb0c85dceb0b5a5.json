{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\n// No in browser stuff from design of app\nimport { useState } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler/index';\nimport Resizable from \"./resizable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        initalValue: \"const a = 1;\",\n        onChange: value => setInput(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"gg1OCfBTcBn/WTN6LEnbOG9SPco=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx"],"names":["useState","CodeEditor","Preview","bundle","Resizable","CodeCell","code","setCode","input","setInput","onClick","output","value"],"mappings":";;;AAAA;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,OAAO,GAAG,YAAY;AACxB,UAAMC,MAAM,GAAG,MAAMR,MAAM,CAACK,KAAD,CAA3B;AACAD,IAAAA,OAAO,CAACI,MAAD,CAAP;AACH,GAHD;;AAKA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAE,UAAtB;AAAA,2BACI;AAAA,8BACI,QAAC,UAAD;AACI,QAAA,WAAW,EAAE,cADjB;AAEI,QAAA,QAAQ,EAAGC,KAAD,IAAWH,QAAQ,CAACG,KAAD;AAFjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEN;AAAf;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CArBD;;GAAMD,Q;;KAAAA,Q;AAuBN,eAAeA,QAAf","sourcesContent":["// No in browser stuff from design of app\n\nimport { useState } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler/index';\nimport Resizable from \"./resizable\";\n\nconst CodeCell = () => {\n    const [code, setCode] = useState('');\n    const [input, setInput] = useState('');\n\n    const onClick = async () => {\n        const output = await bundle(input);\n        setCode(output);\n    };\n\n    return (\n        <Resizable direction={\"vertical\"}>\n            <div>\n                <CodeEditor\n                    initalValue={\"const a = 1;\"}\n                    onChange={(value) => setInput(value)}\n                />\n \n                <Preview code={code} />\n            </div>\n        </Resizable>\n    );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}