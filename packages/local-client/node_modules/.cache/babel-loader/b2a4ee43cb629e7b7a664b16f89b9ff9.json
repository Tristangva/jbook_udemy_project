{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-editor.css';\nimport './syntax.css';\nimport { useRef } from 'react';\nimport MonacoEditor from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = ({\n  onChange,\n  initialValue\n}) => {\n  _s();\n\n  const editorRef = useRef();\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n    const highlighter = new Highlighter( // @ts-ignore\n    window.monaco, codeShift, monacoEditor);\n    highlighter.highLightOnDidChangeModelContent(() => {}, () => {}, undefined, () => {});\n  };\n\n  const onFormatClick = () => {\n    // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue(); // format that value\n\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, ''); // set the formatted value back in the editor\n\n    editorRef.current.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      height: \"100%\",\n      options: {\n        wordWrap: 'on',\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-editor.tsx"],"names":["useRef","MonacoEditor","prettier","parser","codeShift","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","Highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAO,cAAP;AACA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAA6C,sBAA7C;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAOA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAgC;AAAA;;AAC1E,QAAMC,SAAS,GAAGR,MAAM,EAAxB;;AAEA,QAAMS,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACjEH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAM;AACvCP,MAAAA,QAAQ,CAACI,QAAQ,EAAT,CAAR;AACH,KAFD;AAIA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AAEA,UAAMC,WAAW,GAAG,IAAIC,WAAJ,EAChB;AACAC,IAAAA,MAAM,CAACC,MAFS,EAGhBhB,SAHgB,EAIhBO,YAJgB,CAApB;AAMAM,IAAAA,WAAW,CAACI,gCAAZ,CACI,MAAM,CAAE,CADZ,EAEI,MAAM,CAAE,CAFZ,EAGIC,SAHJ,EAII,MAAM,CAAE,CAJZ;AAMH,GApBD;;AAsBA,QAAMC,aAAa,GAAG,MAAM;AACxB;AACA,UAAMC,WAAW,GAAGhB,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAFwB,CAIxB;;AACA,UAAMe,SAAS,GAAGvB,QAAQ,CACrBwB,MADa,CACNF,WADM,EACO;AACjBrB,MAAAA,MAAM,EAAE,OADS;AAEjBwB,MAAAA,OAAO,EAAE,CAACxB,MAAD,CAFQ;AAGjByB,MAAAA,OAAO,EAAE,KAHQ;AAIjBC,MAAAA,IAAI,EAAE,IAJW;AAKjBC,MAAAA,WAAW,EAAE;AALI,KADP,EAQbC,OARa,CAQL,KARK,EAQE,EARF,CAAlB,CALwB,CAexB;;AACAvB,IAAAA,SAAS,CAACI,OAAV,CAAkBoB,QAAlB,CAA2BP,SAA3B;AACH,GAjBD;;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AACI,MAAA,SAAS,EAAC,0CADd;AAEI,MAAA,OAAO,EAAEF,aAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,YAAD;AACI,MAAA,cAAc,EAAEd,gBADpB;AAEI,MAAA,KAAK,EAAEF,YAFX;AAGI,MAAA,KAAK,EAAC,MAHV;AAII,MAAA,QAAQ,EAAC,YAJb;AAKI,MAAA,MAAM,EAAC,MALX;AAMI,MAAA,OAAO,EAAE;AACL0B,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFJ;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,mBAAmB,EAAE,CALhB;AAMLC,QAAAA,QAAQ,EAAE,EANL;AAOLC,QAAAA,oBAAoB,EAAE,KAPjB;AAQLC,QAAAA,eAAe,EAAE;AARZ;AANb;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH,CAvED;;GAAMpC,U;;KAAAA,U;AAyEN,eAAeA,UAAf","sourcesContent":["import './code-editor.css';\nimport './syntax.css';\nimport { useRef } from 'react';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\n\ninterface CodeEditorProps {\n    initialValue: string;\n    onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n    const editorRef = useRef<any>();\n\n    const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n        editorRef.current = monacoEditor;\n        monacoEditor.onDidChangeModelContent(() => {\n            onChange(getValue());\n        });\n\n        monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n\n        const highlighter = new Highlighter(\n            // @ts-ignore\n            window.monaco,\n            codeShift,\n            monacoEditor\n        );\n        highlighter.highLightOnDidChangeModelContent(\n            () => {},\n            () => {},\n            undefined,\n            () => {}\n        );\n    };\n\n    const onFormatClick = () => {\n        // get current value from editor\n        const unformatted = editorRef.current.getModel().getValue();\n\n        // format that value\n        const formatted = prettier\n            .format(unformatted, {\n                parser: 'babel',\n                plugins: [parser],\n                useTabs: false,\n                semi: true,\n                singleQuote: true,\n            })\n            .replace(/\\n$/, '');\n\n        // set the formatted value back in the editor\n        editorRef.current.setValue(formatted);\n    };\n\n    return (\n        <div className=\"editor-wrapper\">\n            <button\n                className=\"button button-format is-primary is-small\"\n                onClick={onFormatClick}\n            >\n                Format\n            </button>\n            <MonacoEditor\n                editorDidMount={onEditorDidMount}\n                value={initialValue}\n                theme=\"dark\"\n                language=\"javascript\"\n                height=\"100%\"\n                options={{\n                    wordWrap: 'on',\n                    minimap: { enabled: false },\n                    showUnused: false,\n                    folding: false,\n                    lineNumbersMinChars: 3,\n                    fontSize: 16,\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                }}\n            />\n        </div>\n    );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}