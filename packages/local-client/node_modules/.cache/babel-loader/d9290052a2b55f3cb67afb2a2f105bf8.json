{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/components/cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect } from \"react\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from \"./add-cell\";\nimport './cell-list.css';\nimport { useActions } from \"../hooks/use-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => {\n    return order.map(id => {\n      return data[id];\n    });\n  });\n  const {\n    fetchCells,\n    saveCells\n  } = useActions();\n  useEffect(() => {\n    fetchCells();\n  }, []);\n  useEffect(() => {\n    saveCells();\n  }, [JSON.stringify(cells)]);\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddCell, {\n      previousCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, cell.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-list\",\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      forceVisible: cells.length === 0,\n      previousCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), \" \", renderedCells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CellList, \"ntJ0LTLPXYByl6i4YsKulJTgH9Q=\", false, function () {\n  return [useTypedSelector, useActions];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/components/cell-list.tsx"],"names":["Fragment","useEffect","useTypedSelector","CellListItem","AddCell","useActions","CellList","cells","order","data","map","id","fetchCells","saveCells","JSON","stringify","renderedCells","cell","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,gBAAR,QAA+B,6BAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,iBAAP;AACA,SAASC,UAAT,QAA0B,sBAA1B;;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,KAAK,GAAGL,gBAAgB,CAAC,CAAC;AAACK,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAR,GAAD,KAA6B;AACxD,WAAOD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQ;AACrB,aAAOF,IAAI,CAACE,EAAD,CAAX;AACH,KAFM,CAAP;AAGH,GAJ6B,CAA9B;AAKA,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA0BR,UAAU,EAA1C;AAEAJ,EAAAA,SAAS,CAAC,MAAK;AACXW,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAK;AACXY,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACC,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAD,CAFM,CAAT;AAIA,QAAMS,aAAa,GAAGT,KAAK,CAACG,GAAN,CAAWO,IAAD,iBAC5B,QAAC,QAAD;AAAA,4BACI,QAAC,YAAD;AAA4B,MAAA,IAAI,EAAEA;AAAlC,OAAmBA,IAAI,CAACN,EAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,cAAc,EAAEM,IAAI,CAACN;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,KAAeM,IAAI,CAACN,EAApB;AAAA;AAAA;AAAA;AAAA,UADkB,CAAtB;AAOA,sBACI;AAAK,IAAA,SAAS,EAAE,WAAhB;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,YAAY,EAAEJ,KAAK,CAACW,MAAN,KAAiB,CAAxC;AAA2C,MAAA,cAAc,EAAE;AAA3D;AAAA;AAAA;AAAA;AAAA,YADJ,OAEKF,aAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA7BD;;GAAMV,Q;UACYJ,gB,EAKkBG,U;;;KAN9BC,Q;AA+BN,eAAeA,QAAf","sourcesContent":["import {Fragment, useEffect} from \"react\";\nimport {useTypedSelector} from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from \"./add-cell\";\nimport './cell-list.css'\nimport { useActions} from \"../hooks/use-actions\";\n\nconst CellList: React.FC = () => {\n    const cells = useTypedSelector(({cells: { order, data} })=> {\n        return order.map((id) => {\n            return data[id];\n        });\n    });\n    const {fetchCells, saveCells} = useActions();\n\n    useEffect(()=> {\n        fetchCells();\n    }, []);\n\n    useEffect(()=> {\n        saveCells();\n    }, [JSON.stringify(cells)]);\n\n    const renderedCells = cells.map((cell) => (\n        <Fragment key={cell.id}>\n            <CellListItem key={cell.id} cell={cell} />\n            <AddCell previousCellId={cell.id} />\n        </Fragment>\n    ));\n\n    return (\n        <div className={\"cell-list\"}>\n            <AddCell forceVisible={cells.length === 0} previousCellId={null} /> {/* Add cell at the bottom with null */}\n            {renderedCells}\n        </div>\n    )\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}