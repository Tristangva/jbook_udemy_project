{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/cell-list-item.tsx\";\n\n/*\n    Changes type of cell list item, shows action bar on item\n */\nimport './cell-list-item.css';\nimport TextEditor from \"./text-editor\";\nimport CodeCell from \"./code-cell\";\nimport ActionBar from \"./action-bar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CellListItem = ({\n  cell\n}) => {\n  let child; //switches what type of child\n\n  if (cell.type === 'code') {\n    child = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-bar-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(ActionBar, {\n          id: cell.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CodeCell, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else {\n    child = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextEditor, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ActionBar, {\n        id: cell.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } //action bar added\n\n  /* css to make each child have the icons */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-list-item\",\n    children: [child, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 11\n  }, this);\n};\n\n_c = CellListItem;\nexport default CellListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellListItem\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/cell-list-item.tsx"],"names":["TextEditor","CodeCell","ActionBar","CellListItem","cell","child","type","id"],"mappings":";;AAAA;AACA;AACA;AAEA,OAAO,sBAAP;AAEA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;;AAMA,MAAMC,YAAyC,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC1D,MAAIC,KAAJ,CAD0D,CAG1D;;AACA,MAAID,IAAI,CAACE,IAAL,KAAa,MAAjB,EAAwB;AACpBD,IAAAA,KAAK,gBAAG;AAAA,8BACJ;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,EAAE,EAAED,IAAI,CAACG;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADI,eAIJ,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEH;AAAhB;AAAA;AAAA;AAAA;AAAA,cAJI;AAAA,oBAAR;AAMH,GAPD,MAOO;AACHC,IAAAA,KAAK,gBAAG;AAAA,8BACJ,QAAC,UAAD;AAAY,QAAA,IAAI,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,cADI,eAEJ,QAAC,SAAD;AAAW,QAAA,EAAE,EAAEA,IAAI,CAACG;AAApB;AAAA;AAAA;AAAA;AAAA,cAFI;AAAA,oBAAR;AAIH,GAhByD,CAiB1D;;AACA;;;AACA,sBAAM;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACDF,KADC;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAGH,CAtBD;;KAAMF,Y;AAwBN,eAAeA,YAAf","sourcesContent":["/*\n    Changes type of cell list item, shows action bar on item\n */\n\nimport './cell-list-item.css';\nimport {Cell} from \"../state/cell\";\nimport TextEditor from \"./text-editor\";\nimport CodeCell from \"./code-cell\";\nimport ActionBar from \"./action-bar\";\n\ninterface CellListItemProps {\n    cell: Cell;\n}\n\nconst CellListItem: React.FC<CellListItemProps> = ({cell}) => {\n    let child: JSX.Element;\n\n    //switches what type of child\n    if (cell.type ==='code'){\n        child = <>\n            <div className=\"action-bar-wrapper\">\n                <ActionBar id={cell.id} />\n            </div>\n            <CodeCell cell={cell} />\n        </>\n    } else {\n        child = <>\n            <TextEditor cell={cell}/>\n            <ActionBar id={cell.id} />\n        </>\n    }\n    //action bar added\n    /* css to make each child have the icons */\n    return<div className=\"cell-list-item\">\n        {child} {/* flipped child and actionbar */}\n    </div>\n};\n\nexport default CellListItem;\n"]},"metadata":{},"sourceType":"module"}