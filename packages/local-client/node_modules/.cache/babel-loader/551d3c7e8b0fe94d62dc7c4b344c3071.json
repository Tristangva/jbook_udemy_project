{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"./use-typed-selector\";\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  // creates array of code strings for lower cells to access previous cells code\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]); // allows values to print in preview\n    // React + Dom is added to make sure react components chan show with show()\n\n    const showFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var show = (value) => {\n          const root = document.querySelector('#root');\n    \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n              root.innerHTML = JSON.stringify(value);\n            }\n          } else {\n            root.innerHTML = value;\n          }\n        };\n      `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      } //checks if current cell\n\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  }).join('\\n');\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":";;AAAA,SAAQA,gBAAR,QAA+B,sBAA/B;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AAEjD;AACA,SAAQF,gBAAgB,CAAEG,KAAD,IAAW;AAChC,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,KAAK,CAACG,KAA5B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAArB,CAFgC,CAIhC;AACA;;AACA,UAAMC,QAAQ,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhBQ;AAkBA,UAAMC,YAAY,GAAG,qBAArB;AAEA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,YAAd,EAA4B;AACxB,UAAGM,CAAC,CAACC,IAAF,KAAW,MAAd,EAAsB;AAClB,YAAID,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACjBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,QAApB;AACH,SAFD,MAEO;AACHE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,YAApB;AACH;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACH,OARuB,CASxB;;;AACA,UAAIH,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACjB;AACH;AACJ;;AACD,WAAOU,cAAP;AACH,GA1CuB,CAAhB,CA0CLK,IA1CK,CA0CA,IA1CA,CAAR;AA2CH,CA9CM;;GAAMhB,iB;UAGDD,gB","sourcesContent":["import {useTypedSelector} from \"./use-typed-selector\";\n\nexport const useCumulativeCode = (cellId: string) => {\n\n    // creates array of code strings for lower cells to access previous cells code\n    return  useTypedSelector((state) => {\n        const {data, order} = state.cells;\n        const orderedCells = order.map((id) => data[id]);\n\n        // allows values to print in preview\n        // React + Dom is added to make sure react components chan show with show()\n        const showFunc = `\n        import _React from 'react';\n        import _ReactDOM from 'react-dom';\n        var show = (value) => {\n          const root = document.querySelector('#root');\n    \n          if (typeof value === 'object') {\n            if (value.$$typeof && value.props) {\n              _ReactDOM.render(value, root);\n            } else {\n              root.innerHTML = JSON.stringify(value);\n            }\n          } else {\n            root.innerHTML = value;\n          }\n        };\n      `;\n\n        const showFuncNoop = 'var show = () => {}';\n\n        const cumulativeCode = [];\n        for (let c of orderedCells) {\n            if(c.type === 'code') {\n                if (c.id === cellId) {\n                    cumulativeCode.push(showFunc);\n                } else {\n                    cumulativeCode.push(showFuncNoop)\n                }\n                cumulativeCode.push(c.content);\n            }\n            //checks if current cell\n            if (c.id === cellId) {\n                break;\n            }\n        }\n        return cumulativeCode;\n    }).join('\\n');\n}\n"]},"metadata":{},"sourceType":"module"}