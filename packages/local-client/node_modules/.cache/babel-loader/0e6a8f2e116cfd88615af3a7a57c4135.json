{"ast":null,"code":"import axios from \"axios\";\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = input => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: input\n          };\n        } //check to see if we have already fetched this file\n        // const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n        //\n        // //and if it is, return immediately\n        // if (cachedResult) {\n        //     return cachedResult;\n        // }\n\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const fileType = args.path.match(/.css$/) ? 'css' : 'jsx';\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n        const contents = fileType === 'css' ? `\n                            const style = document.createElement('style');\n                            style.innerText = '${escaped}';\n                            document.head.appendChild(style);\n                        ` : data;\n        const result = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, result);\n        return result; //vales stored\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","fetchPlugin","input","setup","build","onLoad","filter","args","path","loader","contents","data","request","get","fileType","match","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAKA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAC1C,SAAM;AACFF,IAAAA,IAAI,EAAE,cADJ;;AAEFG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9BA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAAqB;AAEhD,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AACHC,YAAAA,MAAM,EAAE,KADL;AAEHC,YAAAA,QAAQ,EAAER;AAFP,WAAP;AAIH,SAP+C,CAShD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,cAAM;AAAES,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAMhB,KAAK,CAACiB,GAAN,CAAUN,IAAI,CAACC,IAAf,CAA/B,CAjBgD,CAkBhD;;AAEA,cAAMM,QAAQ,GAAGP,IAAI,CAACC,IAAL,CAAUO,KAAV,CAAgB,OAAhB,IAA2B,KAA3B,GAAmC,KAApD;AAEA,cAAMC,OAAO,GAAGL,IAAI,CACfM,OADW,CACH,KADG,EACI,EADJ,EAEXA,OAFW,CAEH,IAFG,EAEG,KAFH,EAGXA,OAHW,CAGH,IAHG,EAGG,KAHH,CAAhB;AAIA,cAAMP,QAAQ,GACVI,QAAQ,KAAK,KAAb,GACK;AACzB;AACA,iDAAiDE,OAAQ;AACzD;AACA,yBALoB,GAMML,IAPV;AASA,cAAMO,MAA4B,GAAG;AACjCT,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAFiC;AAGjCS,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcR,OAAO,CAACS,WAAtB,EAAmCC;AAHd,SAArC,CAnCgD,CAwChD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBhB,IAAI,CAACC,IAAvB,EAA6BU,MAA7B,CAAN;AAEA,eAAOA,MAAP,CA3CgD,CA4ChD;AACH,OA7CD;AA8CH;;AAjDC,GAAN;AAmDH,CApDM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport axios from \"axios\";\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache'\n});\n\n\nexport const fetchPlugin = (input: string) => {\n    return{\n        name: 'fetch-plugin',\n        setup(build: esbuild.PluginBuild) {\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n\n                if (args.path === 'index.js') {\n                    return {\n                        loader: 'jsx',\n                        contents: input,\n                    };\n                }\n\n                //check to see if we have already fetched this file\n                // const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n                //\n                // //and if it is, return immediately\n                // if (cachedResult) {\n                //     return cachedResult;\n                // }\n\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const fileType = args.path.match(/.css$/) ? 'css' : 'jsx';\n\n                const escaped = data\n                    .replace(/\\n/g, '')\n                    .replace(/\"/g, '\\\\\"')\n                    .replace(/'/g, \"\\\\'\");\n                const contents =\n                    fileType === 'css' ?\n                        `\n                            const style = document.createElement('style');\n                            style.innerText = '${escaped}';\n                            document.head.appendChild(style);\n                        `\n                        : data;\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, result);\n\n                return result;\n                //vales stored\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}