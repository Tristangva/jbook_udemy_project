{"ast":null,"code":"import axios from \"axios\";\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\n\n(async () => {\n  await fileCache.setItem('color', 'red');\n  const color = await fileCache.getItem('color');\n  console.log(color);\n})();\n\nexport const unpkgPathPlugin = input => {\n  return {\n    name: 'unpkg-path-plugin',\n\n    setup(build) {\n      build.onResolve({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          path: 'index.js',\n          namespace: 'a'\n        };\n      });\n      build.onResolve({\n        filter: /^\\.+\\//\n      }, args => {\n        return {\n          namespace: 'a',\n          path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href\n        };\n      });\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: input\n          };\n        } //check to see if we have already fetched this file\n\n\n        const cachedResult = await fileCache.getItem(args.path); //and if it is, return immediately\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, request);\n        return result; //vales stored\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/unpkg-path-plugins.ts"],"names":["axios","localForage","fileCache","createInstance","name","setItem","color","getItem","console","log","unpkgPathPlugin","input","setup","build","onResolve","filter","path","namespace","args","URL","resolveDir","href","onLoad","loader","contents","cachedResult","data","request","get","result","responseURL","pathname"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;;AAIA,CAAC,YAAY;AACT,QAAMF,SAAS,CAACG,OAAV,CAAkB,OAAlB,EAA2B,KAA3B,CAAN;AAEA,QAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACK,OAAV,CAAkB,OAAlB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,CALD;;AAOA,OAAO,MAAMI,eAAe,GAAIC,KAAD,IAAmB;AAC9C,SAAO;AACHP,IAAAA,IAAI,EAAE,mBADH;;AAEHQ,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAE9BA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAhB,EAA2C,MAAM;AAC7C,eAAO;AAACC,UAAAA,IAAI,EAAE,UAAP;AAAmBC,UAAAA,SAAS,EAAE;AAA9B,SAAP;AACH,OAFD;AAIAJ,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAsCG,IAAD,IAAc;AAC/C,eAAO;AACHD,UAAAA,SAAS,EAAE,GADR;AAEHD,UAAAA,IAAI,EAAE,IAAIG,GAAJ,CACFD,IAAI,CAACF,IADH,EAEF,sBAAoBE,IAAI,CAACE,UAAzB,GAAoC,GAFlC,EAGJC;AALC,SAAP;AAOH,OARD;AAUAR,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOG,IAAP,IAAqB;AAEnD,eAAO;AACHD,UAAAA,SAAS,EAAE,GADR;AAEHD,UAAAA,IAAI,EAAG,qBAAoBE,IAAI,CAACF,IAAK;AAFlC,SAAP;AAKH,OAPD;AASAH,MAAAA,KAAK,CAACS,MAAN,CAAa;AAAEP,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAChDV,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,IAAtB;;AAEA,YAAIA,IAAI,CAACF,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AACHO,YAAAA,MAAM,EAAE,KADL;AAEHC,YAAAA,QAAQ,EAAEb;AAFP,WAAP;AAIH,SAR+C,CAUhD;;;AACA,cAAMc,YAAY,GAAG,MAAMvB,SAAS,CAACK,OAAV,CAAwCW,IAAI,CAACF,IAA7C,CAA3B,CAXgD,CAahD;;AACA,YAAIS,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;;AACD,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAM3B,KAAK,CAAC4B,GAAN,CAAUV,IAAI,CAACF,IAAf,CAA/B,CAjBgD,CAkBhD;;AAEA,cAAMa,MAA4B,GAAG;AACjCN,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEE,IAFuB;AAGjCN,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcQ,OAAO,CAACG,WAAtB,EAAmCC;AAHd,SAArC,CApBgD,CAyBhD;;AACA,cAAM7B,SAAS,CAACG,OAAV,CAAkBa,IAAI,CAACF,IAAvB,EAA6BW,OAA7B,CAAN;AAEA,eAAOE,MAAP,CA5BgD,CA6BhD;AACH,OA9BD;AA+BH;;AA1DE,GAAP;AA4DH,CA7DM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from \"axios\";\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache'\n});\n\n(async () => {\n    await fileCache.setItem('color', 'red');\n\n    const color = await fileCache.getItem('color');\n    console.log(color);\n})()\n\nexport const unpkgPathPlugin = (input: string) => {\n    return {\n        name: 'unpkg-path-plugin',\n        setup(build: esbuild.PluginBuild) {\n\n            build.onResolve({filter: /(^index\\.js$)/}, () => {\n                return {path: 'index.js', namespace: 'a'};\n            });\n\n            build.onResolve({ filter: /^\\.+\\//}, (args:any) => {\n                return {\n                    namespace: 'a',\n                    path: new URL(\n                        args.path,\n                        'https://unpkg.com'+args.resolveDir+'/'\n                    ).href,\n                };\n            })\n\n            build.onResolve({ filter: /.*/ }, async (args: any) => {\n\n                return {\n                    namespace: 'a',\n                    path: `https://unpkg.com/${args.path}`\n                }\n\n            });\n\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n                console.log('onLoad', args);\n\n                if (args.path === 'index.js') {\n                    return {\n                        loader: 'jsx',\n                        contents: input,\n                    };\n                }\n\n                //check to see if we have already fetched this file\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n                //and if it is, return immediately\n                if (cachedResult) {\n                    return cachedResult;\n                }\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, request);\n\n                return result;\n                //vales stored\n            });\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}