{"ast":null,"code":"import axios from \"axios\";\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\n\n(async () => {\n  await fileCache.setItem('color', 'red');\n  const color = await fileCache.getItem('color');\n  console.log(color);\n})();\n\nexport const unpkgPathPlugin = () => {\n  return {\n    name: 'unpkg-path-plugin',\n\n    setup(build) {\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        console.log('onResolve', args);\n\n        if (args.path === 'index.js') {\n          return {\n            path: args.path,\n            namespace: 'a'\n          };\n        }\n\n        if (args.path.includes('./') || args.path.includes('../')) {\n          return {\n            namespace: 'a',\n            path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href\n          };\n        }\n\n        return {\n          namespace: 'a',\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log('onLoad', args);\n\n        if (args.path === 'index.js') {\n          return {\n            loader: 'jsx',\n            contents: `\n                          import react, {useState} from 'react-select';\n                          console.log(react, useState);\n                        `\n          };\n        } //check to see if we have already fetched this file\n\n\n        const cachedResult = await fileCache.getItem(args.path); //and if it is, return immediately\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // args.path = key\n\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; //store responce in cache\n\n        await fileCache.setItem(args.path, request);\n        return result; //vales stored\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/plugins/unpkg-path-plugins.ts"],"names":["axios","localForage","fileCache","createInstance","name","setItem","color","getItem","console","log","unpkgPathPlugin","setup","build","onResolve","filter","args","path","namespace","includes","URL","resolveDir","href","onLoad","loader","contents","cachedResult","data","request","get","result","responseURL","pathname"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;;AAIA,CAAC,YAAY;AACT,QAAMF,SAAS,CAACG,OAAV,CAAkB,OAAlB,EAA2B,KAA3B,CAAN;AAEA,QAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACK,OAAV,CAAkB,OAAlB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,CALD;;AAOA,OAAO,MAAMI,eAAe,GAAG,MAAM;AACjC,SAAO;AACHN,IAAAA,IAAI,EAAE,mBADH;;AAEHO,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAE9BA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOC,IAAP,IAAqB;AACnDP,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,IAAzB;;AACA,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AAAEA,YAAAA,IAAI,EAAED,IAAI,CAACC,IAAb;AAAmBC,YAAAA,SAAS,EAAE;AAA9B,WAAP;AACH;;AAED,YAAGF,IAAI,CAACC,IAAL,CAAUE,QAAV,CAAmB,IAAnB,KAA0BH,IAAI,CAACC,IAAL,CAAUE,QAAV,CAAmB,KAAnB,CAA7B,EAAwD;AACpD,iBAAO;AACHD,YAAAA,SAAS,EAAE,GADR;AAEHD,YAAAA,IAAI,EAAE,IAAIG,GAAJ,CACFJ,IAAI,CAACC,IADH,EAEF,sBAAoBD,IAAI,CAACK,UAAzB,GAAoC,GAFlC,EAGJC;AALC,WAAP;AAOH;;AAED,eAAO;AACHJ,UAAAA,SAAS,EAAE,GADR;AAEHD,UAAAA,IAAI,EAAG,qBAAoBD,IAAI,CAACC,IAAK;AAFlC,SAAP;AAKH,OArBD;AAuBAJ,MAAAA,KAAK,CAACU,MAAN,CAAa;AAAER,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAAqB;AAChDP,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBM,IAAtB;;AAEA,YAAIA,IAAI,CAACC,IAAL,KAAc,UAAlB,EAA8B;AAC1B,iBAAO;AACHO,YAAAA,MAAM,EAAE,KADL;AAEHC,YAAAA,QAAQ,EAAG;AACnC;AACA;AACA;AAL2B,WAAP;AAOH,SAX+C,CAahD;;;AACA,cAAMC,YAAY,GAAG,MAAMvB,SAAS,CAACK,OAAV,CAAwCQ,IAAI,CAACC,IAA7C,CAA3B,CAdgD,CAgBhD;;AACA,YAAIS,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;;AACD,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmB,MAAM3B,KAAK,CAAC4B,GAAN,CAAUb,IAAI,CAACC,IAAf,CAA/B,CApBgD,CAqBhD;;AAEA,cAAMa,MAA4B,GAAG;AACjCN,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEE,IAFuB;AAGjCN,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcQ,OAAO,CAACG,WAAtB,EAAmCC;AAHd,SAArC,CAvBgD,CA4BhD;;AACA,cAAM7B,SAAS,CAACG,OAAV,CAAkBU,IAAI,CAACC,IAAvB,EAA6BW,OAA7B,CAAN;AAEA,eAAOE,MAAP,CA/BgD,CAgChD;AACH,OAjCD;AAkCH;;AA7DE,GAAP;AA+DH,CAhEM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from \"axios\";\nimport localForage from 'localforage';\n\nconst fileCache = localForage.createInstance({\n    name: 'filecache'\n});\n\n(async () => {\n    await fileCache.setItem('color', 'red');\n\n    const color = await fileCache.getItem('color');\n    console.log(color);\n})()\n\nexport const unpkgPathPlugin = () => {\n    return {\n        name: 'unpkg-path-plugin',\n        setup(build: esbuild.PluginBuild) {\n\n            build.onResolve({ filter: /.*/ }, async (args: any) => {\n                console.log('onResolve', args);\n                if (args.path === 'index.js') {\n                    return { path: args.path, namespace: 'a' };\n                }\n\n                if(args.path.includes('./')||args.path.includes('../')) {\n                    return {\n                        namespace: 'a',\n                        path: new URL(\n                            args.path,\n                            'https://unpkg.com'+args.resolveDir+'/'\n                        ).href\n                    };\n                }\n\n                return {\n                    namespace: 'a',\n                    path: `https://unpkg.com/${args.path}`\n                }\n\n            });\n\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n                console.log('onLoad', args);\n\n                if (args.path === 'index.js') {\n                    return {\n                        loader: 'jsx',\n                        contents: `\n                          import react, {useState} from 'react-select';\n                          console.log(react, useState);\n                        `,\n                    };\n                }\n\n                //check to see if we have already fetched this file\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n                //and if it is, return immediately\n                if (cachedResult) {\n                    return cachedResult;\n                }\n                const { data, request} = await axios.get(args.path);\n                // args.path = key\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname\n                }\n                //store responce in cache\n                await fileCache.setItem(args.path, request);\n\n                return result;\n                //vales stored\n            });\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}