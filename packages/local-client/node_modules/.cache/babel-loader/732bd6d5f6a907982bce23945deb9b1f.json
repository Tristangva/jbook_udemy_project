{"ast":null,"code":"import'./code-editor.css';import React,{useRef}from\"react\";import MonacoEditor from'@monaco-editor/react';import prettier from'prettier';import parser from'prettier/parser-babel';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CodeEditor=function CodeEditor(_ref){var onChange=_ref.onChange,initalValue=_ref.initalValue;var editorRef=useRef();var onEditorDidMount=function onEditorDidMount(getValue,monacoEditor){var _monacoEditor$getMode;editorRef.current=monacoEditor;monacoEditor.onDidChangeModelContent(function(){onChange(getValue());});(_monacoEditor$getMode=monacoEditor.getModel())===null||_monacoEditor$getMode===void 0?void 0:_monacoEditor$getMode.updateOptions({tabSize:2});};var onFormatClick=function onFormatClick(){//get current value from editor\nvar unformatted=editorRef.current.getModel().getValue();//format that value\nvar formatted=prettier.format(unformatted,{parser:'babel',plugins:[parser],useTabs:false,semi:true,singleQuote:true}).replace(/\\n$/,'');//set the formated value back in the editor\neditorRef.current.setValue(formatted);};return/*#__PURE__*/_jsxs(\"div\",{className:\"editor-wrapper\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button button-format is-primary is-small\",onClick:onFormatClick,children:\"Format\"}),/*#__PURE__*/_jsx(MonacoEditor,{editorDidMount:onEditorDidMount,value:initalValue,language:\"javascript\",height:\"100%\",theme:\"dark\",options:{wordWrap:'on',minimap:{enabled:false},showUnused:false,folding:false,lineNumbersMinChars:3,fontSize:16,scrollBeyondLastLine:false,automaticLayout:true}})]});};export default CodeEditor;","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/packages/local-client/src/components/code-editor.tsx"],"names":["React","useRef","MonacoEditor","prettier","parser","CodeEditor","onChange","initalValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":"AAAA,MAAO,mBAAP,CACA,MAAOA,CAAAA,KAAP,EAAeC,MAAf,KAA4B,OAA5B,CACA,MAAOC,CAAAA,YAAP,KAA2C,sBAA3C,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,C,wFAOA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAA4B,IAA1BC,CAAAA,QAA0B,MAA1BA,QAA0B,CAAhBC,WAAgB,MAAhBA,WAAgB,CAEtE,GAAMC,CAAAA,SAAS,CAAGP,MAAM,EAAxB,CACA,GAAMQ,CAAAA,gBAAgC,CAAG,QAAnCA,CAAAA,gBAAmC,CAACC,QAAD,CAAWC,YAAX,CAA4B,2BACjEH,SAAS,CAACI,OAAV,CAAoBD,YAApB,CACAA,YAAY,CAACE,uBAAb,CAAqC,UAAI,CACrCP,QAAQ,CAACI,QAAQ,EAAT,CAAR,CACH,CAFD,EAIA,uBAAAC,YAAY,CAACG,QAAb,wEAAyBC,aAAzB,CAAuC,CAACC,OAAO,CAAE,CAAV,CAAvC,EACH,CAPD,CASA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB;AACA,GAAMC,CAAAA,WAAW,CAAGV,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAEA;AACA,GAAMS,CAAAA,SAAS,CAAGhB,QAAQ,CAACiB,MAAT,CAAgBF,WAAhB,CAA6B,CAC3Cd,MAAM,CAAE,OADmC,CAE3CiB,OAAO,CAAE,CAACjB,MAAD,CAFkC,CAG3CkB,OAAO,CAAE,KAHkC,CAI3CC,IAAI,CAAE,IAJqC,CAK3CC,WAAW,CAAE,IAL8B,CAA7B,EAMfC,OANe,CAMP,KANO,CAMA,EANA,CAAlB,CAQA;AACAjB,SAAS,CAACI,OAAV,CAAkBc,QAAlB,CAA2BP,SAA3B,EAEH,CAhBD,CAkBA,mBACI,aAAK,SAAS,CAAE,gBAAhB,wBACI,eAAQ,SAAS,CAAE,0CAAnB,CACQ,OAAO,CAAEF,aADjB,oBADJ,cAGI,KAAC,YAAD,EACI,cAAc,CAAER,gBADpB,CAEI,KAAK,CAAEF,WAFX,CAGI,QAAQ,CAAE,YAHd,CAII,MAAM,CAAE,MAJZ,CAKI,KAAK,CAAE,MALX,CAMI,OAAO,CAAE,CACLoB,QAAQ,CAAE,IADL,CAELC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAX,CAFJ,CAGLC,UAAU,CAAE,KAHP,CAILC,OAAO,CAAE,KAJJ,CAKLC,mBAAmB,CAAE,CALhB,CAMLC,QAAQ,CAAE,EANL,CAOLC,oBAAoB,CAAE,KAPjB,CAQLC,eAAe,CAAE,IARZ,CANb,EAHJ,GADJ,CAuBH,CArDD,CAuDA,cAAe9B,CAAAA,UAAf","sourcesContent":["import './code-editor.css';\nimport React, {useRef} from \"react\";\nimport MonacoEditor, {EditorDidMount} from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\n\ninterface CodeEditorProps {\n    initalValue: string;\n    onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({onChange, initalValue}) =>{\n\n    const editorRef = useRef<any>();\n    const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n        editorRef.current = monacoEditor;\n        monacoEditor.onDidChangeModelContent(()=>{\n            onChange(getValue());\n        })\n\n        monacoEditor.getModel()?.updateOptions({tabSize: 2});\n    };\n\n    const onFormatClick = () => {\n        //get current value from editor\n        const unformatted = editorRef.current.getModel().getValue();\n\n        //format that value\n        const formatted = prettier.format(unformatted, {\n            parser: 'babel',\n            plugins: [parser],\n            useTabs: false,\n            semi: true,\n            singleQuote: true\n        }).replace(/\\n$/, '');\n\n        //set the formated value back in the editor\n        editorRef.current.setValue(formatted);\n\n    };\n\n    return (\n        <div className={\"editor-wrapper\"}>\n            <button className={\"button button-format is-primary is-small\"}\n                    onClick={onFormatClick}>Format</button>\n            <MonacoEditor\n                editorDidMount={onEditorDidMount}\n                value={initalValue}\n                language={\"javascript\"}\n                height={\"100%\"}\n                theme={\"dark\"}\n                options={{\n                    wordWrap: 'on',\n                    minimap: { enabled: false},\n                    showUnused: false,\n                    folding: false,\n                    lineNumbersMinChars: 3,\n                    fontSize: 16,\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                }}\n            />\n        </div>\n        );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}