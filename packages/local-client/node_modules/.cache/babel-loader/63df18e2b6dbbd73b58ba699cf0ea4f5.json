{"ast":null,"code":"var _jsxFileName = \"/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\n// No in browser stuff from design of app\nimport './code-cell.css';\nimport React, { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from \"./resizable\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]); // creates array of code strings for lower cells to access previous cells code\n\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const cumulativeCode = [`\n                const show = (value) => {\n                    document.querySelector('#root').innerHTML = value;\n                };\n            `];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        cumulativeCode.push(c.content);\n      } //checks if current cell\n\n\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n  console.log(cumulativeCode); //bundling process\n\n  useEffect(() => {\n    // if no bundle / if on load up\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initalValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-prumary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          bundlingStatus: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"yh0+p/FVYy1R/eFDdgcBl4kcO5Y=\", false, function () {\n  return [useActions, useTypedSelector, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/tristanwhite/IdeaProjects/jbook/src/components/code-cell.tsx"],"names":["React","useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","data","order","cells","orderedCells","map","c","type","push","content","console","log","join","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":"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","sourcesContent":["// No in browser stuff from design of app\n\nimport './code-cell.css';\nimport React, { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from \"./resizable\";\nimport { Cell } from '../state';\nimport { useActions} from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\n\ninterface CodeCellProps {\n    cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const {updateCell, createBundle} = useActions();\n    const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n\n    // creates array of code strings for lower cells to access previous cells code\n    const cumulativeCode = useTypedSelector((state) => {\n        const {data, order} = state.cells;\n        const orderedCells = order.map(id => data[id]);\n\n        const cumulativeCode = [\n            `\n                const show = (value) => {\n                    document.querySelector('#root').innerHTML = value;\n                };\n            `\n        ];\n        for (let c of orderedCells) {\n            if(c.type === 'code') {\n                cumulativeCode.push(c.content);\n            }\n            //checks if current cell\n            if (c.id === cell.id) {\n                break;\n            }\n        }\n        return cumulativeCode;\n    });\n\n    console.log(cumulativeCode);\n\n    //bundling process\n    useEffect(()=> {\n\n        // if no bundle / if on load up\n        if (!bundle) {\n            createBundle(cell.id, cumulativeCode.join('\\n'));\n            return;\n        }\n\n        const timer = setTimeout(async ()=> {\n            createBundle(cell.id, cumulativeCode.join('\\n'));\n        }, 750);\n\n        return() => {\n            clearTimeout(timer);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n\n    return (\n        <Resizable direction={\"vertical\"}>\n            {/* 'calc(100% - 10px)' has to have spaces in numbers otherwise doesnt work\n                   This was note to self for future referance */}\n            <div style={{height: 'calc(100% - 10px)', display: 'flex', flexDirection: 'row'}}>\n                <Resizable direction={\"horizontal\"}>\n                    <CodeEditor\n                        initalValue={cell.content}\n                        onChange={(value) => updateCell(cell.id, value)}\n                    />\n                </Resizable>\n                <div className={\"progress-wrapper\"}>\n                {!bundle || bundle.loading === true ? (\n                    <div className={\"progress-cover\"}>\n                        <progress className={\"progress is-small is-prumary\"} max=\"100\">\n                            Loading\n                        </progress>\n                    </div>\n                ) : (\n                    <Preview code={bundle.code} bundlingStatus={bundle.err} />\n                )}\n                </div>\n            </div>\n        </Resizable>\n    );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}